
/*
    func scrollViewWillEndDragging(_ scrollView: UIScrollView, withVelocity velocity: CGPoint, targetContentOffset: UnsafeMutablePointer<CGPoint>) {
        
        let list = self.column1
        let verticalOffset = CGFloat( Int(targetContentOffset.pointee.y) % Int(list.rowHeight) )
        
        if(velocity.y < 0) {
            targetContentOffset.pointee.y -= verticalOffset
        } else if(velocity.y > 0) {
            targetContentOffset.pointee.y += list.rowHeight - verticalOffset
        } else {
            if(verticalOffset < list.rowHeight/2) {
                targetContentOffset.pointee.y -= verticalOffset
            } else {
                targetContentOffset.pointee.y += list.rowHeight - verticalOffset
            }
        }
        
        print("###")
    }
    */
    
/*
    func scrollViewWillEndDragging(_ scrollView: UIScrollView, withVelocity velocity: CGPoint, targetContentOffset: UnsafeMutablePointer<CGPoint>) {
        
        let list = self.column1
        
        let posY = Int(targetContentOffset.pointee.y)
        let toMove = posY % Int(list.rowHeight)
        let limit = Int(list.rowHeight/2)
        
        if(toMove < limit) {
            targetContentOffset.pointee.y -= CGFloat(toMove)
        } else {
            targetContentOffset.pointee.y += list.rowHeight - CGFloat(toMove)
        }
    }
*/
    
    
/*
    func scrollViewDidEndDragging(_ scrollView: UIScrollView,
        willDecelerate decelerate: Bool) {
        
        if(!decelerate) {
            self.scrollViewDidEndDecelerating(scrollView)
        }
    }
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        
        let list = self.column1
        let point = CGPoint(x: list.contentOffset.x,
            y: list.contentOffset.y + list.rowHeight/2)
        
        if let iPath = self.column1.indexPathForRow(at: point) {
            list.scrollToRow(at: iPath, at: .top, animated: true)
        }
    }
*/

   /*
    func scrollViewDidEndDragging(_ scrollView: UIScrollView,
        willDecelerate decelerate: Bool) {
        
        //if(!decelerate) {
            //print(scrollView.tag)
            //print("---")
            //self.scrollViewDidEndDecelerating(scrollView)
        //}
        
        //var list = self.column1
        //if(scrollView.tag==102){ list = self.column2 }
        
        /*
        let currentY = scrollView.contentOffset.y
        for i in 0...self.scrollPositions.count-1 {
            var difference = currentY - self.scrollPositions[i]
            if(difference<0){ difference *= -1 }
            
            
        }
        */
        
        /*
        let destinationY: CGFloat = 240.0
        scrollView.setContentOffset(CGPoint(x: 0, y: destinationY), animated: true)
        */
        
        //print( list.contentOffset.y )
        
        //if(!decelerate) {
            self.fixListsScrollPosition(scrollView)
        //}
    }
    */
    
    /*
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        /*
        var list = self.column1
        if(scrollView.tag==102){ list = self.column2 }
        
        
        let point = CGPoint(x: list.contentOffset.x,
            y: list.contentOffset.y + list.rowHeight/2)
        
        if let iPath = self.column1.indexPathForRow(at: point) {
            list.scrollToRow(at: iPath, at: .top, animated: true)
        }
        */
        
        self.fixListsScrollPosition(scrollView)
    }
*/






/*
        var minorVal: (Int, CGFloat) = (0, 0.0)
        let currentY = scrollView.contentOffset.y
        for i in 0...self.scrollPositions.count-1 {
            var difference = currentY - self.scrollPositions[i]
            if(difference<0){ difference *= -1 }
            
            if(i==0){
                minorVal = (0, difference)
            } else {
                if(difference<minorVal.1) {
                    minorVal = (i, difference)
                }
            }
            
        }
        
        let destinationY = self.scrollPositions[minorVal.0]
        //print("destinY", destinationY)
        scrollView.setContentOffset(CGPoint(x: 0, y: destinationY), animated: true)
        */
        
        
        
        
        
        /*
        var list = self.column1
        if(scrollView.tag == 102) { list = self.column2 }
        let iPath = IndexPath(row: minorVal.0+1, section: 0)
        list.scrollToRow(at: iPath, at: .middle, animated: true)
        */
        
        
        
        /*
        self.headerTimer = Timer.scheduledTimer(withTimeInterval: 8.0, repeats: false) { timer in
            self.headerHeightConstraint?.constant = 60.0
            UIView.animate(withDuration: 0.4) {
                self.superview!.layoutIfNeeded()
            } completion: { (succeed) in
            }
        }
        */
